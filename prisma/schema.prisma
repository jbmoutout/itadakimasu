datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Recipe {
  id          Int                @id @default(autoincrement())
  url         String
  originUrl   String?
  title       String?
  description String?
  image       String?
  createdAt   DateTime           @default(now())
  userId      Int
  starred     Boolean            @default(false)
  ingredients RecipeIngredient[]
  user        User               @relation(fields: [userId], references: [id])
  savedLists  SavedList[]
  weeklyPlanHistory WeeklyPlanHistory[]

  @@unique([url, userId])
}

model ShoppingList {
  id        Int      @id @default(autoincrement())
  data      Json
  checked   Boolean @default(false)
  createdAt DateTime @default(now())
  userId    Int?
}

model SavedList {
  id          Int              @id @default(autoincrement())
  name        String           @default("Shopping List")
  createdAt   DateTime         @default(now())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  recipes     Recipe[]
  ingredients SavedIngredient[]

  @@index([userId])
}

model SavedIngredient {
  id              Int         @id @default(autoincrement())
  savedListId     Int
  savedList       SavedList   @relation(fields: [savedListId], references: [id])
  ingredientId    Int
  ingredient      Ingredient  @relation(fields: [ingredientId], references: [id])
  quantity        Float
  unit            String
  category        String      @default("groceries")
  checked         Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([savedListId, ingredientId])
  @@index([savedListId])
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  recipes       Recipe[]
  savedLists    SavedList[]
  weeklyPlanHistory WeeklyPlanHistory[]
}

model Ingredient {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  recipes     RecipeIngredient[]
  savedItems  SavedIngredient[]
  category    String?
  defaultUnit String?
  englishName String?            @unique
  frenchName  String?            @unique
  seasons     IngredientSeason[]
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float?
  unit         String?
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([recipeId, ingredientId])
}

model IngredientSeason {
  id           Int        @id @default(autoincrement())
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  month       Int        // 1-12
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([ingredientId, month])
}

model WeeklyPlanHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  recipeId    Int
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  status      String   // "accepted", "rejected", "suggested"
  planDate    DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([userId, planDate])
  @@index([recipeId, status])
  @@index([createdAt]) // For cleanup queries
}